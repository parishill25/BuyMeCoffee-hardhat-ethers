{
  "language": "Solidity",
  "sources": {
    "contracts/BuyMeCoffee.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Pragma\npragma solidity ^0.8.7;\n\ncontract BuyMeCoffee{\n\n\n    event NewMemo(address indexed from,uint256 timestamp,string  name,string  message);\n\n    struct Memo{\n        address from;\n        uint256 timestamp;\n        string  name;\n        string message;\n    }\n\n   \n    Memo[] memos;\n    address payable immutable i_owner;\n\n    constructor(){\n        i_owner=payable(msg.sender);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"NOT_OWNER\");\n        _;\n    }\n\n    function buyCoffee(string memory _name,string memory _message)payable public {\n        require(msg.value>0,\"Not enough Monney\");\n        memos.push(Memo(\n            msg.sender,\n            block.timestamp,\n            _name,\n            _message\n\n        ));\n         emit NewMemo(msg.sender,block.timestamp,_name,_message);                        \n    }\n\n    function withDrawTips() public onlyOwner {\n        (bool sucess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(sucess,\"withraw failed\");\n    }\n\n    function getMemos() public view returns(Memo[] memory){\n        return memos;\n\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}